{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","idx","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzB,OACC,sBAAKC,UAAU,kDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,gCACC,6BAAKC,IACL,4BAAIC,WCcOI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,8BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,cAAC,EAAD,CAEAV,GAAIO,EAAOG,GAAKV,GAChBC,KAAMM,EAAOG,GAAKT,KAClBC,MAAOK,EAAOG,GAAKR,OAHdQ,SCKIC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,qBAAKT,UAAU,MAAf,SACC,uBACCA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCCI,G,MARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,SAApE,SACEJ,EAAMK,aCgDKC,E,kDA7Cb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAEhB,EAAKC,SAAU,CACbC,YAAaF,EAAMG,OAAOC,SAf5B,EAAKC,MAAQ,CACXvB,OAAQ,GACRoB,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvB,GAAI,OAAI,EAAKiB,SAAS,CAACnB,OAAQE,S,+BAU/B,IAAD,EACyB0B,KAAKL,MAA7BvB,EADD,EACCA,OAAQoB,EADT,EACSA,YACVS,EAAiB7B,EAAO8B,QAAO,SAAAC,GACnC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASb,EAAYY,kBAIvD,OAAKhC,EAAOkC,OAKR,sBAAKtC,UAAU,KAAf,UACE,6CACA,cAAC,EAAD,CAAWS,aAAcuB,KAAKX,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUjB,OAAQ6B,SARjB,oBAAIjC,UAAU,KAAd,4B,GA9BKuC,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.52139e7d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ( {robots} ) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, idx) => {\n\t\t\t\t\treturn \t(\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={idx} \n\t\t\t\t\t\tid={robots[idx].id} \n\t\t\t\t\t\tname={robots[idx].name} \n\t\t\t\t\t\temail={robots[idx].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList; ","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => { //Don't forget to use destructuring here!!!\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\t \n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}  // simliar to onchange event in HTML\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border:'1px solid black', height:'600px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\n// import { robots } from './robots';\nimport SearchBox from '../components/SearchBox';\nimport './App.css'\nimport Scroll from '../components/Scroll';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: '',\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(user => this.setState({robots: user}));\n  }\n\n  onSearchChange = (event) => {\n    // console.log(event.target.value);\n    this.setState ({\n      searchfield: event.target.value\n    })\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    // console.log(filteredRobots);\n\n    if (!robots.length) {  //same as robots.length === 0 (if this is zero)\n      return <h1 className='tc'>Loading...</h1>\n    }\n    else {\n      return (\n        <div className='tc'>\n          <h1>RoboFriends</h1> \n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import Card from './Card';\n// import CardList from './CardList';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// import {robots} from './robots';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\t\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a fun ction\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n//  <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n//  <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>"],"sourceRoot":""}